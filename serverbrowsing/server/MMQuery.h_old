#ifndef _MM_QUERY_H
#define _MM_QUERY_H
#include "main.h"

#include <OS/OpenSpy.h>
#include <OS/Buffer.h>
#include <OS/Task.h>
#include <OS/TaskPool.h>
#include <OS/Thread.h>
#include <OS/Mutex.h>
#include <OS/Redis.h>
#include <vector>
#include <map>
#include <string>

#include <OS/Timer/HiResTimer.h>

class SBServer;
namespace SB {
	class Driver;
	class Peer;
};


namespace MM {
	//
	class MMQueryResponse {
		public:
			MMQueryResponse() {
				peer = NULL;
				extra = NULL;
			};
			~MMQueryResponse() {

			};
			SB::Peer *peer;
			MM::MMQueryRequest request;
			MM::ServerListQuery results;
			void *extra;
	};
	
	class MMQueryTask : public OS::Task<MMQueryRequest> {
		public:
			MMQueryTask(int index);
			~MMQueryTask();

			static void FreeServerListQuery(MM::ServerListQuery *query);

			void AddDriver(SB::Driver *driver);
			void RemoveDriver(SB::Driver *driver);

			static void MQListenerCallback(std::string message, void *extra);

			void debug_dump();
		private:
			
			static void *TaskThread(OS::CThread *thread);

			void AppendServerEntry(std::string entry_name, ServerListQuery *ret, bool all_keys, bool include_deleted, Redis::Connection *redis_ctx, const sServerListReq *req);
			void AppendGroupEntry(const char *entry_name, ServerListQuery *ret, Redis::Connection *redis_ctx, bool all_keys, const MMQueryRequest *request);

			bool FindAppend_ServKVFields(Server *server, std::string entry_name, std::string key, Redis::Connection *redis_ctx);
			bool FindAppend_PlayerKVFields(Server *server, std::string entry_name, std::string key, int index, Redis::Connection *redis_ctx);
			bool FindAppend_TeamKVFields(Server *server, std::string entry_name, std::string key, int index, Redis::Connection *redis_ctx);

			Server *GetServerByKey(std::string key, Redis::Connection *redis_ctx = NULL, bool include_deleted = false);
			Server *GetServerByIP(OS::Address address, OS::GameData game, Redis::Connection *redis_ctx = NULL);

			ServerListQuery GetServers(const sServerListReq *req, const MMQueryRequest *request = NULL);
			ServerListQuery GetGroups(const sServerListReq *req, const MMQueryRequest *request = NULL);

			void PerformServersQuery(MMQueryRequest request);
			void PerformGroupsQuery(MMQueryRequest request);
			void PerformSubmitData(MMQueryRequest request);
			void PerformGetServerByKey(MMQueryRequest request);
			void PerformGetServerByIP(MMQueryRequest request);
			void PerformGetGameInfoPairByGameName(MMQueryRequest request);
			void PerformGetGameInfoByGameName(MMQueryRequest request);
			
			std::vector<SB::Driver *> m_drivers;
			Redis::Connection *mp_redis_connection;
			time_t m_redis_timeout;
			bool m_thread_awake;
			OS::HiResTimer *mp_timer;
			int m_thread_index;
	};

	#define NUM_MM_QUERY_THREADS 8
	#define MM_WAIT_MAX_TIME 1500
	extern OS::TaskPool<MMQueryTask, MMQueryRequest> *m_task_pool;
	void SetupTaskPool(SBServer *server);
	void ShutdownTaskPool();
	void *setup_redis_async(OS::CThread *thread);

};

#endif //_MM_QUERY_H